<html lang="en" xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta charset="utf-8" />
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.2/css/bootstrap.min.css">
  <link rel="stylesheet" href="/GraphStyles/stylesheet.css" />
  <link rel="shortcut icon" href="https://p.sfx.ms/about/v20/non-localizable/img/chrome/favicon.ico" />
</head>
<body>

<div id="holder">

<!-- HTML Page Content Start -->

<div class="container wrapper" id="body">
    <div class="row">
        <div class="col-md-9">
            <h1 id="call-the-microsoft-graph-api-with-a-nodejs-app">Call the Microsoft Graph API with a Node.js app</h1>
<p>In this article we look at the minimum tasks required to connect your application to Office 365 and call the Microsoft Graph API. We use code from the <a href="https://github.com/OfficeDev/O365-Nodejs-Unified-API-Connect" target="_blank">Office 365 Node.js Connect sample using Microsoft Graph</a> to explain the main concepts that you have to implement in your app.</p>
<p><img src="./images/web-screenshot.png" alt="Office 365 Node.js Connect sample screenshot" /></p>
<h2 id="overview">Overview</h2>
<p>To call the Microsoft Graph API, your web app must complete the following tasks.</p>
<ol>
<li><a href="#register">Register the application in Azure Active Directory</a></li>
<li><a href="#adal">Install the Azure Active Directory Client Library for Node</a></li>
<li><a href="#redirect">Redirect the browser to the sign-in page</a></li>
<li><a href="#authcode">Receive an authorization code in your reply URL page</a></li>
<li><a href="#accesstoken">Use <code>adal-node</code> to request an access token</a></li>
<li><a href="#request">Make a request to the Microsoft Graph API</a></li>
</ol>
<p>&lt;a name=&quot;register&quot;/&gt;</p>
<h2 id="register-your-application-in-azure-active-directory">Register your application in Azure Active Directory</h2>
<p>Before you can start working with Office 365, you need to register your application on Azure Active Directory and set permissions to use Microsoft Graph services.</p>
<p>See <a href="https://msdn.microsoft.com/office/office365/HowTo/add-common-consent-manually#bk_RegisterServerApp" target="_blank">Register your web server app with the Azure Management Portal</a> for instructions, keep in mind the following details.</p>
<ul>
<li>Specify a page in your Node.js app as the <strong>Sign-on URL</strong> in step 6. In the case of the Connect sample, the URL is http://localhost:8080/login, which maps to the <a href="https://github.com/OfficeDev/O365-Nodejs-Unified-API-Connect/blob/master/routes/index.js#L33" target="_blank">/login</a> route.</li>
<li><a href="https://github.com/OfficeDev/O365-Nodejs-Unified-API-Connect/wiki/Grant-permissions-to-the-Connect-application-in-Azure" target="_blank">Configure the <strong>Delegated permissions</strong></a> that your app requires. The Connect sample requires <strong>Send mail as signed-in user</strong> permission.</li>
</ul>
<p>Take note of the following values in the <strong>Configure</strong> page of your Azure application.</p>
<ul>
<li>Client ID</li>
<li>A valid key</li>
<li>A reply URL</li>
</ul>
<p>You need these values as parameters in the OAuth flow in your app.</p>
<p>&lt;a name=&quot;adal&quot;&gt;</p>
<h2 id="install-the-azure-active-directory-client-library-for-node">Install the Azure Active Directory Client Library for Node</h2>
<p>The ADAL for Node.js library makes it easy for Node.js applications to authenticate to AAD in order to access AAD protected web resources.
To add adal-node to your existing <code>package.json</code> enter the following into your preferred terminal.</p>
<p><code>npm install adal-node --save</code></p>
<p>For more information about the adal-node client library, see its package info on <a href="https://www.npmjs.com/package/adal-node" target="_blank">npm</a>.
For issues, source code, and the latest in upcoming features and fixes, see adal-node's project on <a href="https://github.com/AzureAD/azure-activedirectory-library-for-nodejs" target="_blank">Github</a>.</p>
<p>&lt;a name=&quot;redirect&quot;/&gt;</p>
<h2 id="redirect-the-browser-to-the-sign-in-page">Redirect the browser to the sign-in page</h2>
<p>Your app needs to redirect the browser to the sign-in page to get an authorization code and continue the OAuth 2.0 flow.</p>
<p>In the Connect sample, the authentication URL from <a href="https://github.com/OfficeDev/O365-Nodejs-Unified-API-Connect/blob/master/authHelper.js#L17" target="_blank"><code>authHelper.js#getAuthUrl</code></a> is redirected by the <a href="https://github.com/OfficeDev/O365-Nodejs-Unified-API-Connect/blob/master/views/login.hbs#L2" target="_blank"><code>login.hbs#login</code></a> function through a client-side <code>onclick</code> event.</p>
<p><strong>authHelper.js#getAuthUrl</strong></p>
<pre><code class="javascript">/**
 * Generate a fully formed uri to use for authentication based on the supplied resource argument
 * @return {string} a fully formed uri with which authentcation can be completed
 */
function getAuthUrl() {
    return credentials.authority + &quot;/oauth2/authorize&quot; +
        &quot;?client_id=&quot; + credentials.client_id +
        &quot;&amp;response_type=code&quot; +
        &quot;&amp;redirect_uri=&quot; + credentials.redirect_uri;
};
</code></pre>

<p><strong>login.hbs#login</strong></p>
<pre><code class="javascript">function login() {
    window.location = '{{auth_url}}'.replace(/&amp;amp;/g, '&amp;'); // transform HTML special char from .hbs template rendering
}
</code></pre>

<p>&lt;a name=&quot;authcode&quot;/&gt;</p>
<h2 id="receive-an-authorization-code-in-your-reply-url-page">Receive an authorization code in your reply URL page</h2>
<p>After the user signs in, the flow returns the browser to the reply URL in your app. The authorization code is provided in the <code>code</code> query string variable.</p>
<pre><code class="javascript">router.get('/&lt;application reply url&gt;', function (req, res, next) {
  var authCode = req.query.code;
  // your router's implementation
});
</code></pre>

<p>See the <a href="https://github.com/OfficeDev/O365-Nodejs-Unified-API-Connect/blob/master/routes/index.js#L34" target="_blank">relevant code</a> in the Connect sample</p>
<p>&lt;a name=&quot;accesstoken&quot;/&gt;</p>
<h2 id="use--to-request-an-access-token">Use <code>adal-node</code> to request an access token</h2>
<p>Now that we've authenticated with Azure Active Directory, our next step is to acquire an access token via adal-node. After we've done that, we'll be ready to make REST requests to the Microsoft Graph API.</p>
<p>To request an access token, adal-node provides two callback functions.</p>
<table>
<thead>
<tr>
	<th align="center">Function</th>
	<th align="center">Params</th>
	<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
	<td align="center"><code>AuthenticationContext.acquireTokenWithAuthorizationCode</code></td>
	<td align="center"><code>authCode</code>, <code>redirect_uri</code>, <code>resource</code>, <code>client_id</code>, <code>client_secret</code>, <code>callback</code></td>
	<td>provides an access token for a specified resource based on the authorization code returned during login</td>
</tr>
<tr>
	<td align="center"><code>AuthenticationContext.acquireTokenWithRefreshToken</code></td>
	<td align="center"><code>token</code>, <code>client_id</code>, <code>client_secret</code>, <code>resource</code>, <code>callback</code></td>
	<td>provides an access token for a specified resourced based on a refresh token</td>
</tr>
</tbody>
</table>
<p>In the Connect sample, requests are routed through <a href="https://github.com/OfficeDev/O365-Nodejs-Unified-API-Connect/blob/master/authHelper.js" target="_blank"><code>authHelper.js</code></a> so that the <code>client_id</code> and <code>client_secret</code> can be added.</p>
<pre><code class="javascript">// The application registration (must match Azure AD config)
var credentials = {
    authority: &quot;https://login.microsoftonline.com/common&quot;,
    client_id: &quot;&lt;your client id here&gt;&quot;,
    client_secret: &quot;&lt;your client secret&gt;&quot;,
    redirect_uri: &quot;http://localhost:8080/login&quot;
};

/**
 * Gets a token for a given resource.
 * @param {string} code An authorization code returned from a client.
 * @param {string} res A URI that identifies the resource for which the token is valid.
 * @param {AcquireTokenCallback} callback The callback function.
 */
function getTokenFromCode(res, code, callback) {
    var authContext = new AuthenticationContext(credentials.authority);
    authContext.acquireTokenWithAuthorizationCode(code, credentials.redirect_uri, res, credentials.client_id, credentials.client_secret, function (err, response) {
        if (err) {
            callback(null);
        }
        else {
            callback(response);
        }
    });
};
</code></pre>

<p>&lt;a name=&quot;request&quot;/&gt;</p>
<h2 id="make-a-request-to-the-microsoft-graph-api">Make a request to the Microsoft Graph API</h2>
<p>To identify our requests to the Graph API, our requests must be signed with an <code>Authorization</code> header containing the access token for any web service resource we request. A properly formed authorization header will include the access token from adal-node and will take the following form.</p>
<p><code>Authorization: Bearer &lt;access token&gt;</code></p>
<p>Using <code>adal-node</code>, combined with our <a href="#authcode">authentication logic from the previous section</a>, we can now use our access token to sign requests.</p>
<pre><code class="javascript">/* GET home page. */
router.get('/&lt;application reply url&gt;', function (req, res, next) {
    var authCode = req.query.code;
    authHelper.getTokenFromCode('https://graph.microsoft.com/', req.query.code, function (token) {
        if (token !== null) {
            // Use this token to sign requests
            var headers = {
                'Content-Type': 'application/json',
                'Authorization': 'Bearer ' + token
                };
            // request implementation...
        } else {
            // error handling
        }
    });
});
</code></pre>

<p>The Microsoft Graph is a very powerful, unifiying API that can be used to interact with all kinds of Microsoft data. Check out the <a href="https://msdn.microsoft.com/office/office365/howto/office-365-unified-api-reference" target="_blank">API reference</a> to explore what else you can accomplish with the Microsoft Graph API.</p>
<h2 id="additional-resources">Additional resources</h2>
<ul>
<li><a href="https://github.com/OfficeDev/O365-Nodejs-Unified-API-Connect" target="_blank">Office 365 Node.js Connect sample using Microsoft Graph</a></li>
<li><a href="http://dev.office.com" target="_blank">Office Dev Center</a></li>
<li><a href="https://msdn.microsoft.com/office/office365/howto/office-365-unified-api-reference" target="_blank">Microsoft Graph API reference</a></li>
</ul>

        </div>        
    </div>
</div>
<!-- HTML Page Content End -->

</div>

<script src="https://ajax.googleapis.com/ajax/libs/jquery/1.11.2/jquery.min.js"></script>  
<script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.2/js/bootstrap.min.js"></script>  
   
</body>  
</html>  




